{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EzraHoss\\\\Desktop\\\\ReactGitHubProjects\\\\ToDoApp\\\\ToDoApp\\\\todo-app\\\\src\\\\ToDos\\\\DoughnutChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart } from 'primereact/chart';\nimport './DoughnutChart.css'; // Import your new CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DoughnutChart({\n  completedTasks,\n  tasks\n}) {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const [chartOptions, setChartOptions] = useState({});\n  useEffect(() => {\n    const documentStyle = getComputedStyle(document.documentElement);\n\n    // Get the count of total, completed, and remaining tasks\n    const totalCount = tasks.length; // Total tasks\n    const completedCount = completedTasks.length; // Completed tasks\n    const remainingCount = totalCount - completedCount; // Remaining tasks\n\n    let data = {\n      labels: [],\n      datasets: [{\n        data: [],\n        backgroundColor: [],\n        hoverBackgroundColor: []\n      }]\n    };\n\n    // Determine the data for the chart based on task counts\n    if (totalCount === 0) {\n      // No tasks\n      data.labels = ['No Tasks'];\n      data.datasets[0].data = [1]; // Display one segment for \"No Tasks\"\n      data.datasets[0].backgroundColor = ['#e0e0e0']; // Grey color for no tasks\n    } else if (completedCount === 0) {\n      // All remaining tasks (none completed)\n      data.labels = ['Remaining'];\n      data.datasets[0].data = [remainingCount]; // Show only remaining tasks\n      data.datasets[0].backgroundColor = [documentStyle.getPropertyValue('--yellow-500')];\n    } else if (remainingCount === 0) {\n      // All tasks completed\n      data.labels = ['Completed'];\n      data.datasets[0].data = [completedCount]; // Show only completed tasks\n      data.datasets[0].backgroundColor = [documentStyle.getPropertyValue('--blue-500')];\n    } else {\n      // Both completed and remaining tasks\n      data.labels = ['Completed', 'Remaining'];\n      data.datasets[0].data = [completedCount, remainingCount];\n      data.datasets[0].backgroundColor = [documentStyle.getPropertyValue('--blue-500'), documentStyle.getPropertyValue('--yellow-500')];\n    }\n    const options = {\n      cutout: '60%',\n      // Cutout for a doughnut shape\n      responsive: true,\n      // Responsive design\n      maintainAspectRatio: false // Prevent maintaining aspect ratio\n    };\n    setChartData(data);\n    setChartOptions(options);\n  }, [completedTasks, tasks]); // Ensure tasks prop is being tracked\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doughnut-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      type: \"doughnut\",\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doughnut-display\",\n      children: \"Tasks Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doughnut-footer\",\n      children: tasks.length === 0 ? 'No tasks available' : `${completedTasks.length} Completed, ${tasks.length - completedTasks.length} Remaining`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(DoughnutChart, \"IwROKHPuKnEUHgI07gGP2QYlTYw=\");\n_c = DoughnutChart;\nvar _c;\n$RefreshReg$(_c, \"DoughnutChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","DoughnutChart","completedTasks","tasks","_s","chartData","setChartData","chartOptions","setChartOptions","documentStyle","getComputedStyle","document","documentElement","totalCount","length","completedCount","remainingCount","data","labels","datasets","backgroundColor","hoverBackgroundColor","getPropertyValue","options","cutout","responsive","maintainAspectRatio","className","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/EzraHoss/Desktop/ReactGitHubProjects/ToDoApp/ToDoApp/todo-app/src/ToDos/DoughnutChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart } from 'primereact/chart';\r\nimport './DoughnutChart.css'; // Import your new CSS file\r\n\r\nexport default function DoughnutChart({ completedTasks, tasks }) {\r\n    const [chartData, setChartData] = useState({});\r\n    const [chartOptions, setChartOptions] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const documentStyle = getComputedStyle(document.documentElement);\r\n\r\n        // Get the count of total, completed, and remaining tasks\r\n        const totalCount = tasks.length; // Total tasks\r\n        const completedCount = completedTasks.length; // Completed tasks\r\n        const remainingCount = totalCount - completedCount; // Remaining tasks\r\n\r\n        let data = {\r\n            labels: [],\r\n            datasets: [\r\n                {\r\n                    data: [],\r\n                    backgroundColor: [],\r\n                    hoverBackgroundColor: []\r\n                }\r\n            ]\r\n        };\r\n\r\n        // Determine the data for the chart based on task counts\r\n        if (totalCount === 0) {\r\n            // No tasks\r\n            data.labels = ['No Tasks'];\r\n            data.datasets[0].data = [1]; // Display one segment for \"No Tasks\"\r\n            data.datasets[0].backgroundColor = ['#e0e0e0']; // Grey color for no tasks\r\n        } else if (completedCount === 0) {\r\n            // All remaining tasks (none completed)\r\n            data.labels = ['Remaining'];\r\n            data.datasets[0].data = [remainingCount]; // Show only remaining tasks\r\n            data.datasets[0].backgroundColor = [\r\n                documentStyle.getPropertyValue('--yellow-500')\r\n            ];\r\n        } else if (remainingCount === 0) {\r\n            // All tasks completed\r\n            data.labels = ['Completed'];\r\n            data.datasets[0].data = [completedCount]; // Show only completed tasks\r\n            data.datasets[0].backgroundColor = [\r\n                documentStyle.getPropertyValue('--blue-500')\r\n            ];\r\n        } else {\r\n            // Both completed and remaining tasks\r\n            data.labels = ['Completed', 'Remaining'];\r\n            data.datasets[0].data = [completedCount, remainingCount];\r\n            data.datasets[0].backgroundColor = [\r\n                documentStyle.getPropertyValue('--blue-500'),\r\n                documentStyle.getPropertyValue('--yellow-500')\r\n            ];\r\n        }\r\n\r\n        const options = {\r\n            cutout: '60%', // Cutout for a doughnut shape\r\n            responsive: true, // Responsive design\r\n            maintainAspectRatio: false // Prevent maintaining aspect ratio\r\n        };\r\n\r\n        setChartData(data);\r\n        setChartOptions(options);\r\n    }, [completedTasks, tasks]); // Ensure tasks prop is being tracked\r\n\r\n    return (\r\n        <div className=\"doughnut-chart-container\">\r\n            <Chart type=\"doughnut\" data={chartData} options={chartOptions} />\r\n            <div className=\"doughnut-display\">Tasks Overview</div>\r\n            <div className=\"doughnut-footer\">\r\n                {tasks.length === 0 \r\n                    ? 'No tasks available'\r\n                    : `${completedTasks.length} Completed, ${tasks.length - completedTasks.length} Remaining`}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}